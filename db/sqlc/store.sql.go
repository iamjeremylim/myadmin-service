// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: store.sql

package db

import (
	"context"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (
  owner,
  name
) VALUES (
  $1, $2
) RETURNING id, owner, name, created_at
`

type CreateStoreParams struct {
	Owner string `json:"owner"`
	Name  string `json:"name"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore, arg.Owner, arg.Name)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM stores
WHERE id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStore, id)
	return err
}

const getStore = `-- name: GetStore :one
SELECT id, owner, name, created_at FROM stores
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStore(ctx context.Context, id int64) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getStoreForUpdate = `-- name: GetStoreForUpdate :one
SELECT id, owner, name, created_at FROM stores
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetStoreForUpdate(ctx context.Context, id int64) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStoreForUpdate, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const listStores = `-- name: ListStores :many
SELECT id, owner, name, created_at FROM stores
WHERE owner = $1
ORDER BY id
`

func (q *Queries) ListStores(ctx context.Context, owner string) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, listStores, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Store{}
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :one
UPDATE stores
SET name = $2
WHERE id = $1
RETURNING id, owner, name, created_at
`

type UpdateStoreParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, updateStore, arg.ID, arg.Name)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}
